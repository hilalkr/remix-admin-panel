---
description: 
globs: 
alwaysApply: false
---
# Project Code Style and Organization Guidelines

## Component Structure
- **Co-locate CSS with Components**: Place each component's `.module.css` file next to its respective component for improved discoverability.
  ```
  components/
    Button/
      Button.tsx
      Button.module.css   // this is only example, you should make it to new added components
  ```

## CSS Best Practices

### Multi-line @apply Rules
- Break `@apply` rules into multiple lines for better readability and version control:
  ```css
  .btn {
    @apply
      px-4
      py-2
      text-white
      bg-blue-500
      rounded;
  }
  ```

### No Inline Tailwind Classes
- **Problem**: Long inline Tailwind class strings make JSX hard to read:
  ```tsx
  <div className="mb-6 flex flex-col md:flex-row md:items-center md:justify-between">
  ```

- **Solution**: Use CSS Modules for cleaner JSX and better reuse:
  ```tsx
  <div className={styles.wrapper} />
  
  /* In wrapper.module.css */
  .wrapper {
    @apply mb-6 flex flex-col md:flex-row md:items-center md:justify-between;
  }
  ```

## Routing Conventions

### Flat Routes
- Use Remix Flat Routes convention with `remix-flat-routes` to reduce folder depth and improve clarity:
  ```
  routes/
    dashboard+/
      users+/
        _index.tsx         // /dashboard/users
        new.tsx           // /dashboard/users/new
      user-edit.$userId.tsx // /dashboard/user-edit/123
  ```
- The + notation indicates route grouping without additional URL segments

## Component Development

### UI Components
- Follow shadcn/ui patterns for new components
- Maintain the "new-york" style from components.json configuration
- Create UI components in the `app/components/ui/` directory
- Extend existing components rather than creating new ones when possible

## Form Handling and Validation

### Zod Schema Validation
- Define schemas at the top of your route files:
  ```tsx
  // Define form schema with Zod
  const userSchema = z.object({
    name: z.string().min(1, "Name is required"),
    email: z.string().email("Invalid email address"),
    role: z.enum(["admin", "user", "editor"] as const),
    status: z.enum(["active", "inactive", "pending"] as const),
  });
  ```

- Use `safeParse` for validation in action functions:
  ```tsx
  const result = userSchema.safeParse(formValues);
  if (!result.success) {
    return json({ errors: result.error.format() }, { status: 400 });
  }
  ```

## Internationalization Practices

### Translation Keys
- Organize translation keys hierarchically:
  ```json
  {
    "users": {
      "name": "Name",
      "email": "Email",
      "role": "Role",
      "roles": {
        "admin": "Administrator",
        "user": "User",
        "editor": "Editor"
      }
    }
  }
  ```

### Translation Usage
- Use the `useTranslation` hook consistently:
  ```tsx
  const { t } = useTranslation("common");
  
  // Later in JSX
  <Label htmlFor="name">{t("users.name")}</Label>
  ```

## State Management

### Form State
- Use React's `useState` for form state management:
  ```tsx
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    role: "user" as Role,
    status: "active" as Status,
  });
  
  const handleChange = (field: keyof typeof formData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };
  ```

### Server Integration
- Use Remix's `loader` and `action` functions for data operations
- Create server-side services in `app/services` directory
- Follow the naming convention of `*.server.ts` for server-only code

## Data Table Patterns

### TanStack Table
- Use TanStack Table for complex data tables with sorting, filtering, and pagination
- Implement reusable table components in the `app/components/data-table/` directory

## Error Handling

### Form Validation Errors
- Display field-specific errors below form elements:
  ```tsx
  {actionData?.errors && actionData.errors.name && (
    <p className={styles.error}>{actionData.errors.name._errors[0]}</p>
  )}
  ```

### Type Definitions
- Define proper types for action data:
  ```tsx
  type ActionData =
    | { error: string; errors?: never }
    | { errors: Record<string, { _errors: string[] }>; error?: never };
  ```

## Dashboard and Data Visualization

### Charts
- Use Recharts for data visualization
- Create reusable chart components
- Follow consistent styling patterns for charts